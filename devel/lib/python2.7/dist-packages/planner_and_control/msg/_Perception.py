# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planner_and_control/Perception.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Perception(genpy.Message):
  _md5sum = "ac796173eec7500d90ff0331b9cf57b9"
  _type = "planner_and_control/Perception"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[] objx
float64[] objy
float64[] objr

string signname
float64[] signx
float64[] signy

float64[] rightx
float64[] righty

bool tred
bool tyellow
bool tleft
bool tgreen

bool stop"""
  __slots__ = ['objx','objy','objr','signname','signx','signy','rightx','righty','tred','tyellow','tleft','tgreen','stop']
  _slot_types = ['float64[]','float64[]','float64[]','string','float64[]','float64[]','float64[]','float64[]','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       objx,objy,objr,signname,signx,signy,rightx,righty,tred,tyellow,tleft,tgreen,stop

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Perception, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.objx is None:
        self.objx = []
      if self.objy is None:
        self.objy = []
      if self.objr is None:
        self.objr = []
      if self.signname is None:
        self.signname = ''
      if self.signx is None:
        self.signx = []
      if self.signy is None:
        self.signy = []
      if self.rightx is None:
        self.rightx = []
      if self.righty is None:
        self.righty = []
      if self.tred is None:
        self.tred = False
      if self.tyellow is None:
        self.tyellow = False
      if self.tleft is None:
        self.tleft = False
      if self.tgreen is None:
        self.tgreen = False
      if self.stop is None:
        self.stop = False
    else:
      self.objx = []
      self.objy = []
      self.objr = []
      self.signname = ''
      self.signx = []
      self.signy = []
      self.rightx = []
      self.righty = []
      self.tred = False
      self.tyellow = False
      self.tleft = False
      self.tgreen = False
      self.stop = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.objx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.objx))
      length = len(self.objy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.objy))
      length = len(self.objr)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.objr))
      _x = self.signname
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.signx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.signx))
      length = len(self.signy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.signy))
      length = len(self.rightx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.rightx))
      length = len(self.righty)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.righty))
      _x = self
      buff.write(_get_struct_5B().pack(_x.tred, _x.tyellow, _x.tleft, _x.tgreen, _x.stop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.objx = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.objy = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.objr = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.signname = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.signname = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.signx = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.signy = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rightx = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.righty = s.unpack(str[start:end])
      _x = self
      start = end
      end += 5
      (_x.tred, _x.tyellow, _x.tleft, _x.tgreen, _x.stop,) = _get_struct_5B().unpack(str[start:end])
      self.tred = bool(self.tred)
      self.tyellow = bool(self.tyellow)
      self.tleft = bool(self.tleft)
      self.tgreen = bool(self.tgreen)
      self.stop = bool(self.stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.objx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.objx.tostring())
      length = len(self.objy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.objy.tostring())
      length = len(self.objr)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.objr.tostring())
      _x = self.signname
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.signx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.signx.tostring())
      length = len(self.signy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.signy.tostring())
      length = len(self.rightx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.rightx.tostring())
      length = len(self.righty)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.righty.tostring())
      _x = self
      buff.write(_get_struct_5B().pack(_x.tred, _x.tyellow, _x.tleft, _x.tgreen, _x.stop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.objx = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.objy = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.objr = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.signname = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.signname = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.signx = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.signy = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rightx = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.righty = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 5
      (_x.tred, _x.tyellow, _x.tleft, _x.tgreen, _x.stop,) = _get_struct_5B().unpack(str[start:end])
      self.tred = bool(self.tred)
      self.tyellow = bool(self.tyellow)
      self.tleft = bool(self.tleft)
      self.tgreen = bool(self.tgreen)
      self.stop = bool(self.stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
