# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from local_pkg/Local.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Local(genpy.Message):
  _md5sum = "02900f6dd7ae8d0a3ed2e4e2d3c5c924"
  _type = "local_pkg/Local"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 x
float64 y
float64 heading
float64 roll
float64 pitch
float64 dr_x
float64 dr_y
int64 hAcc
float64 speeed
float64 dis
geometry_msgs/Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['x','y','heading','roll','pitch','dr_x','dr_y','hAcc','speeed','dis','orientation']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','int64','float64','float64','geometry_msgs/Quaternion']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,heading,roll,pitch,dr_x,dr_y,hAcc,speeed,dis,orientation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Local, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.heading is None:
        self.heading = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.dr_x is None:
        self.dr_x = 0.
      if self.dr_y is None:
        self.dr_y = 0.
      if self.hAcc is None:
        self.hAcc = 0
      if self.speeed is None:
        self.speeed = 0.
      if self.dis is None:
        self.dis = 0.
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
    else:
      self.x = 0.
      self.y = 0.
      self.heading = 0.
      self.roll = 0.
      self.pitch = 0.
      self.dr_x = 0.
      self.dr_y = 0.
      self.hAcc = 0
      self.speeed = 0.
      self.dis = 0.
      self.orientation = geometry_msgs.msg.Quaternion()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7dq6d().pack(_x.x, _x.y, _x.heading, _x.roll, _x.pitch, _x.dr_x, _x.dr_y, _x.hAcc, _x.speeed, _x.dis, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 112
      (_x.x, _x.y, _x.heading, _x.roll, _x.pitch, _x.dr_x, _x.dr_y, _x.hAcc, _x.speeed, _x.dis, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w,) = _get_struct_7dq6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7dq6d().pack(_x.x, _x.y, _x.heading, _x.roll, _x.pitch, _x.dr_x, _x.dr_y, _x.hAcc, _x.speeed, _x.dis, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 112
      (_x.x, _x.y, _x.heading, _x.roll, _x.pitch, _x.dr_x, _x.dr_y, _x.hAcc, _x.speeed, _x.dis, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w,) = _get_struct_7dq6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7dq6d = None
def _get_struct_7dq6d():
    global _struct_7dq6d
    if _struct_7dq6d is None:
        _struct_7dq6d = struct.Struct("<7dq6d")
    return _struct_7dq6d
