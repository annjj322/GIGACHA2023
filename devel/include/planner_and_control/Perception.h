// Generated by gencpp from file planner_and_control/Perception.msg
// DO NOT EDIT!


#ifndef PLANNER_AND_CONTROL_MESSAGE_PERCEPTION_H
#define PLANNER_AND_CONTROL_MESSAGE_PERCEPTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planner_and_control
{
template <class ContainerAllocator>
struct Perception_
{
  typedef Perception_<ContainerAllocator> Type;

  Perception_()
    : objx()
    , objy()
    , objr()
    , signname()
    , signx()
    , signy()
    , rightx()
    , righty()
    , tred(false)
    , tyellow(false)
    , tleft(false)
    , tgreen(false)
    , stop(false)  {
    }
  Perception_(const ContainerAllocator& _alloc)
    : objx(_alloc)
    , objy(_alloc)
    , objr(_alloc)
    , signname(_alloc)
    , signx(_alloc)
    , signy(_alloc)
    , rightx(_alloc)
    , righty(_alloc)
    , tred(false)
    , tyellow(false)
    , tleft(false)
    , tgreen(false)
    , stop(false)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _objx_type;
  _objx_type objx;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _objy_type;
  _objy_type objy;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _objr_type;
  _objr_type objr;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _signname_type;
  _signname_type signname;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _signx_type;
  _signx_type signx;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _signy_type;
  _signy_type signy;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _rightx_type;
  _rightx_type rightx;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _righty_type;
  _righty_type righty;

   typedef uint8_t _tred_type;
  _tred_type tred;

   typedef uint8_t _tyellow_type;
  _tyellow_type tyellow;

   typedef uint8_t _tleft_type;
  _tleft_type tleft;

   typedef uint8_t _tgreen_type;
  _tgreen_type tgreen;

   typedef uint8_t _stop_type;
  _stop_type stop;





  typedef boost::shared_ptr< ::planner_and_control::Perception_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_and_control::Perception_<ContainerAllocator> const> ConstPtr;

}; // struct Perception_

typedef ::planner_and_control::Perception_<std::allocator<void> > Perception;

typedef boost::shared_ptr< ::planner_and_control::Perception > PerceptionPtr;
typedef boost::shared_ptr< ::planner_and_control::Perception const> PerceptionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_and_control::Perception_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_and_control::Perception_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_and_control::Perception_<ContainerAllocator1> & lhs, const ::planner_and_control::Perception_<ContainerAllocator2> & rhs)
{
  return lhs.objx == rhs.objx &&
    lhs.objy == rhs.objy &&
    lhs.objr == rhs.objr &&
    lhs.signname == rhs.signname &&
    lhs.signx == rhs.signx &&
    lhs.signy == rhs.signy &&
    lhs.rightx == rhs.rightx &&
    lhs.righty == rhs.righty &&
    lhs.tred == rhs.tred &&
    lhs.tyellow == rhs.tyellow &&
    lhs.tleft == rhs.tleft &&
    lhs.tgreen == rhs.tgreen &&
    lhs.stop == rhs.stop;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_and_control::Perception_<ContainerAllocator1> & lhs, const ::planner_and_control::Perception_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_and_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::planner_and_control::Perception_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_and_control::Perception_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_and_control::Perception_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_and_control::Perception_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_and_control::Perception_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_and_control::Perception_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_and_control::Perception_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac796173eec7500d90ff0331b9cf57b9";
  }

  static const char* value(const ::planner_and_control::Perception_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac796173eec7500dULL;
  static const uint64_t static_value2 = 0x90ff0331b9cf57b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_and_control::Perception_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_and_control/Perception";
  }

  static const char* value(const ::planner_and_control::Perception_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_and_control::Perception_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] objx\n"
"float64[] objy\n"
"float64[] objr\n"
"\n"
"string signname\n"
"float64[] signx\n"
"float64[] signy\n"
"\n"
"float64[] rightx\n"
"float64[] righty\n"
"\n"
"bool tred\n"
"bool tyellow\n"
"bool tleft\n"
"bool tgreen\n"
"\n"
"bool stop\n"
;
  }

  static const char* value(const ::planner_and_control::Perception_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_and_control::Perception_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.objx);
      stream.next(m.objy);
      stream.next(m.objr);
      stream.next(m.signname);
      stream.next(m.signx);
      stream.next(m.signy);
      stream.next(m.rightx);
      stream.next(m.righty);
      stream.next(m.tred);
      stream.next(m.tyellow);
      stream.next(m.tleft);
      stream.next(m.tgreen);
      stream.next(m.stop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Perception_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_and_control::Perception_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_and_control::Perception_<ContainerAllocator>& v)
  {
    s << indent << "objx[]" << std::endl;
    for (size_t i = 0; i < v.objx.size(); ++i)
    {
      s << indent << "  objx[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.objx[i]);
    }
    s << indent << "objy[]" << std::endl;
    for (size_t i = 0; i < v.objy.size(); ++i)
    {
      s << indent << "  objy[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.objy[i]);
    }
    s << indent << "objr[]" << std::endl;
    for (size_t i = 0; i < v.objr.size(); ++i)
    {
      s << indent << "  objr[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.objr[i]);
    }
    s << indent << "signname: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.signname);
    s << indent << "signx[]" << std::endl;
    for (size_t i = 0; i < v.signx.size(); ++i)
    {
      s << indent << "  signx[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.signx[i]);
    }
    s << indent << "signy[]" << std::endl;
    for (size_t i = 0; i < v.signy.size(); ++i)
    {
      s << indent << "  signy[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.signy[i]);
    }
    s << indent << "rightx[]" << std::endl;
    for (size_t i = 0; i < v.rightx.size(); ++i)
    {
      s << indent << "  rightx[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rightx[i]);
    }
    s << indent << "righty[]" << std::endl;
    for (size_t i = 0; i < v.righty.size(); ++i)
    {
      s << indent << "  righty[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.righty[i]);
    }
    s << indent << "tred: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tred);
    s << indent << "tyellow: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tyellow);
    s << indent << "tleft: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tleft);
    s << indent << "tgreen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tgreen);
    s << indent << "stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_AND_CONTROL_MESSAGE_PERCEPTION_H
