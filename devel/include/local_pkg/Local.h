// Generated by gencpp from file local_pkg/Local.msg
// DO NOT EDIT!


#ifndef LOCAL_PKG_MESSAGE_LOCAL_H
#define LOCAL_PKG_MESSAGE_LOCAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>

namespace local_pkg
{
template <class ContainerAllocator>
struct Local_
{
  typedef Local_<ContainerAllocator> Type;

  Local_()
    : x(0.0)
    , y(0.0)
    , heading(0.0)
    , roll(0.0)
    , pitch(0.0)
    , dr_x(0.0)
    , dr_y(0.0)
    , hAcc(0)
    , speeed(0.0)
    , dis(0.0)
    , orientation()  {
    }
  Local_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , heading(0.0)
    , roll(0.0)
    , pitch(0.0)
    , dr_x(0.0)
    , dr_y(0.0)
    , hAcc(0)
    , speeed(0.0)
    , dis(0.0)
    , orientation(_alloc)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _dr_x_type;
  _dr_x_type dr_x;

   typedef double _dr_y_type;
  _dr_y_type dr_y;

   typedef int64_t _hAcc_type;
  _hAcc_type hAcc;

   typedef double _speeed_type;
  _speeed_type speeed;

   typedef double _dis_type;
  _dis_type dis;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::local_pkg::Local_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::local_pkg::Local_<ContainerAllocator> const> ConstPtr;

}; // struct Local_

typedef ::local_pkg::Local_<std::allocator<void> > Local;

typedef boost::shared_ptr< ::local_pkg::Local > LocalPtr;
typedef boost::shared_ptr< ::local_pkg::Local const> LocalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::local_pkg::Local_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::local_pkg::Local_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::local_pkg::Local_<ContainerAllocator1> & lhs, const ::local_pkg::Local_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.heading == rhs.heading &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.dr_x == rhs.dr_x &&
    lhs.dr_y == rhs.dr_y &&
    lhs.hAcc == rhs.hAcc &&
    lhs.speeed == rhs.speeed &&
    lhs.dis == rhs.dis &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::local_pkg::Local_<ContainerAllocator1> & lhs, const ::local_pkg::Local_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace local_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::local_pkg::Local_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::local_pkg::Local_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::local_pkg::Local_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::local_pkg::Local_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::local_pkg::Local_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::local_pkg::Local_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::local_pkg::Local_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02900f6dd7ae8d0a3ed2e4e2d3c5c924";
  }

  static const char* value(const ::local_pkg::Local_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02900f6dd7ae8d0aULL;
  static const uint64_t static_value2 = 0x3ed2e4e2d3c5c924ULL;
};

template<class ContainerAllocator>
struct DataType< ::local_pkg::Local_<ContainerAllocator> >
{
  static const char* value()
  {
    return "local_pkg/Local";
  }

  static const char* value(const ::local_pkg::Local_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::local_pkg::Local_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 heading\n"
"float64 roll\n"
"float64 pitch\n"
"float64 dr_x\n"
"float64 dr_y\n"
"int64 hAcc\n"
"float64 speeed\n"
"float64 dis\n"
"geometry_msgs/Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::local_pkg::Local_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::local_pkg::Local_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.heading);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.dr_x);
      stream.next(m.dr_y);
      stream.next(m.hAcc);
      stream.next(m.speeed);
      stream.next(m.dis);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Local_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::local_pkg::Local_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::local_pkg::Local_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "dr_x: ";
    Printer<double>::stream(s, indent + "  ", v.dr_x);
    s << indent << "dr_y: ";
    Printer<double>::stream(s, indent + "  ", v.dr_y);
    s << indent << "hAcc: ";
    Printer<int64_t>::stream(s, indent + "  ", v.hAcc);
    s << indent << "speeed: ";
    Printer<double>::stream(s, indent + "  ", v.speeed);
    s << indent << "dis: ";
    Printer<double>::stream(s, indent + "  ", v.dis);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCAL_PKG_MESSAGE_LOCAL_H
