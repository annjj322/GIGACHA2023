// Generated by gencpp from file planner_and_control/Parking.msg
// DO NOT EDIT!


#ifndef PLANNER_AND_CONTROL_MESSAGE_PARKING_H
#define PLANNER_AND_CONTROL_MESSAGE_PARKING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planner_and_control
{
template <class ContainerAllocator>
struct Parking_
{
  typedef Parking_<ContainerAllocator> Type;

  Parking_()
    : index(0)
    , on(false)  {
    }
  Parking_(const ContainerAllocator& _alloc)
    : index(0)
    , on(false)  {
  (void)_alloc;
    }



   typedef int32_t _index_type;
  _index_type index;

   typedef uint8_t _on_type;
  _on_type on;





  typedef boost::shared_ptr< ::planner_and_control::Parking_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_and_control::Parking_<ContainerAllocator> const> ConstPtr;

}; // struct Parking_

typedef ::planner_and_control::Parking_<std::allocator<void> > Parking;

typedef boost::shared_ptr< ::planner_and_control::Parking > ParkingPtr;
typedef boost::shared_ptr< ::planner_and_control::Parking const> ParkingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_and_control::Parking_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_and_control::Parking_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_and_control::Parking_<ContainerAllocator1> & lhs, const ::planner_and_control::Parking_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.on == rhs.on;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_and_control::Parking_<ContainerAllocator1> & lhs, const ::planner_and_control::Parking_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_and_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::planner_and_control::Parking_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_and_control::Parking_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_and_control::Parking_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_and_control::Parking_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_and_control::Parking_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_and_control::Parking_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_and_control::Parking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08ee4255d6c0b7ed5813480b1d774735";
  }

  static const char* value(const ::planner_and_control::Parking_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08ee4255d6c0b7edULL;
  static const uint64_t static_value2 = 0x5813480b1d774735ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_and_control::Parking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_and_control/Parking";
  }

  static const char* value(const ::planner_and_control::Parking_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_and_control::Parking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 index\n"
"bool on # for controller target_index (look_ahead)\n"
;
  }

  static const char* value(const ::planner_and_control::Parking_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_and_control::Parking_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.on);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Parking_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_and_control::Parking_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_and_control::Parking_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.on);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_AND_CONTROL_MESSAGE_PARKING_H
