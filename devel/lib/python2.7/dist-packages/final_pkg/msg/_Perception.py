# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from final_pkg/Perception.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Perception(genpy.Message):
  _md5sum = "dbbed136df240d7f479ccfd9293ea715"
  _type = "final_pkg/Perception"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 A_target
float64 A_objx
float64 A_objy

int64[] bbox_size
float64[] B_target_x
float64[] B_target_y

string signname"""
  __slots__ = ['A_target','A_objx','A_objy','bbox_size','B_target_x','B_target_y','signname']
  _slot_types = ['int64','float64','float64','int64[]','float64[]','float64[]','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       A_target,A_objx,A_objy,bbox_size,B_target_x,B_target_y,signname

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Perception, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.A_target is None:
        self.A_target = 0
      if self.A_objx is None:
        self.A_objx = 0.
      if self.A_objy is None:
        self.A_objy = 0.
      if self.bbox_size is None:
        self.bbox_size = []
      if self.B_target_x is None:
        self.B_target_x = []
      if self.B_target_y is None:
        self.B_target_y = []
      if self.signname is None:
        self.signname = ''
    else:
      self.A_target = 0
      self.A_objx = 0.
      self.A_objy = 0.
      self.bbox_size = []
      self.B_target_x = []
      self.B_target_y = []
      self.signname = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q2d().pack(_x.A_target, _x.A_objx, _x.A_objy))
      length = len(self.bbox_size)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.bbox_size))
      length = len(self.B_target_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.B_target_x))
      length = len(self.B_target_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.B_target_y))
      _x = self.signname
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.A_target, _x.A_objx, _x.A_objy,) = _get_struct_q2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bbox_size = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.B_target_x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.B_target_y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.signname = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.signname = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q2d().pack(_x.A_target, _x.A_objx, _x.A_objy))
      length = len(self.bbox_size)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.bbox_size.tostring())
      length = len(self.B_target_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.B_target_x.tostring())
      length = len(self.B_target_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.B_target_y.tostring())
      _x = self.signname
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.A_target, _x.A_objx, _x.A_objy,) = _get_struct_q2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bbox_size = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.B_target_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.B_target_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.signname = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.signname = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q2d = None
def _get_struct_q2d():
    global _struct_q2d
    if _struct_q2d is None:
        _struct_q2d = struct.Struct("<q2d")
    return _struct_q2d
